# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]    
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"  
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Updated OpenAI model from 'gpt-4' to 'gpt-4-0125-preview' for better performance and capabilities in the Telegram bot
- When handling WooCommerce API operations, use WC_CONSUMER_KEY and WC_CONSUMER_SECRET for product operations, and WP_USER/WP_PASSWORD for media uploads
- Always include detailed logging in image upload operations for better debugging
- Use separate authentication methods for WordPress media uploads (Basic Auth) and WooCommerce operations (API keys)

# Scratchpad

## Project Overview - WordPress AI Agent

### Purpose
A Telegram bot that enables natural language management of a WooCommerce WordPress store in Hebrew.

### Key Features
[X] Natural language command processing in Hebrew via Telegram
[X] Command interpretation using LangChain and OpenAI
[X] WooCommerce operations via REST API
[X] Supported operations:
  - Remove discounts from products
  - Update product prices
  - View sales data
  - List products
  - Upload and manage product images

### Current Task - Adding New Features
[X] ניהול קופונים
  - יצירת קופון חדש
  - עריכת קופון קיים
  - מחיקת קופון
  - הצגת רשימת קופונים פעילים
  - הגדרת תנאי שימוש לקופון

[ ] ניהול הזמנות
  - הצגת רשימת הזמנות
  - הצגת פרטי הזמנה ספציפית
  - עדכון סטטוס הזמנה
  - חיפוש הזמנות לפי פרמטרים שונים

[ ] ניהול לקוחות
  - הצגת רשימת לקוחות
  - הצגת פרטי לקוח
  - עדכון פרטי לקוח
  - חיפוש לקוחות

[ ] ניהול קטגוריות
  - יצירת קטגוריה חדשה
  - עריכת קטגוריה קיימת
  - מחיקת קטגוריה
  - שיוך מוצרים לקטגוריות

[ ] ניהול מלאי מתקדם
  - התראות על מלאי נמוך
  - עדכון מלאי אוטומטי
  - ניהול מלאי לפי מאפיינים (צבע, גודל וכו')

[ ] ניהול שילוח
  - הגדרת אזורי שילוח
  - קביעת מחירי משלוח
  - מעקב אחר משלוחים

[ ] הגדרות חנות
  - עדכון פרטי חנות בסיסיים
  - הגדרות מיסים
  - הגדרות תשלום

### סדר פיתוח מוצע:
[X] ניהול קופונים (הכי דחוף ופשוט יחסית)
[ ] ניהול הזמנות (חשוב למעקב ותפעול)
[ ] ניהול קטגוריות (יעזור בארגון המוצרים)
[ ] ניהול לקוחות
[ ] ניהול מלאי מתקדם
[ ] ניהול שילוח
[ ] הגדרות חנות

### שלב ראשון - פיתוח ניהול קופונים
[X] הוספת מחלקה חדשה `coupon_handler.py`
[X] הוספת פונקציות בסיסיות:
  - create_coupon
  - edit_coupon
  - delete_coupon
  - list_coupons
  - get_coupon_details
[X] אינטגרציה עם הבוט הראשי
[X] הוספת דוגמאות שימוש בעברית
[X] בדיקות ותיעוד

### שלב הבא - פיתוח ניהול הזמנות
[ ] הוספת מחלקה חדשה `order_handler.py`
[ ] הוספת פונקציות בסיסיות:
  - list_orders
  - get_order_details
  - update_order_status
  - search_orders
[ ] אינטגרציה עם הבוט הראשי
[ ] הוספת דוגמאות שימוש בעברית
[ ] בדיקות ותיעוד

### Core Technologies
- Python 3.8+
- python-telegram-bot v21.10
- LangChain with OpenAI
- WooCommerce REST API

### System Requirements
- Telegram account and bot (via BotFather)
- OpenAI API key
- WordPress site with WooCommerce installed

### Project Structure
- `main.py` - Main bot code
- `.env` - Configuration with API keys and URLs
- `requirements.txt` - Required libraries
- `.cursorrules` - Guidelines and task management

### Security Considerations
- `.env` file for API key storage
- Dedicated WordPress application password recommended
- Restricted Telegram bot access 